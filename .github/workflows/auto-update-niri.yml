name: Auto-update niri

on:
  schedule:
    # Run daily at 7 AM UTC (offset from other workflows)
    - cron: '0 7 * * *'
  workflow_dispatch: # Manual trigger

permissions:
  contents: write
  pull-requests: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for new release
        id: check
        run: |
          # Get latest release from GitHub API
          LATEST=$(curl -s https://api.github.com/repos/YaLTeR/niri/releases/latest | jq -r .tag_name | sed 's/^v//')

          # Get current latest version from existing ebuilds (excluding 9999)
          if ls gui-wm/niri/niri-*.ebuild 1> /dev/null 2>&1; then
            CURRENT=$(ls gui-wm/niri/niri-*.ebuild | grep -v 9999 | sed 's/.*niri-\(.*\)\.ebuild/\1/' | sort -V | tail -1)
          else
            CURRENT=""
          fi

          echo "Latest release: $LATEST"
          echo "Current version: $CURRENT"

          if [ "$LATEST" != "$CURRENT" ]; then
            echo "update-needed=true" >> $GITHUB_OUTPUT
            echo "version=$LATEST" >> $GITHUB_OUTPUT
            echo "Update needed: $CURRENT -> $LATEST"
          else
            echo "update-needed=false" >> $GITHUB_OUTPUT
            echo "No update needed"
          fi

      - name: Install b2sum
        if: steps.check.outputs.update-needed == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y coreutils

      - name: Generate new ebuild and update manifest
        if: steps.check.outputs.update-needed == 'true'
        run: |
          cd gui-wm/niri/

          # Find the latest existing ebuild (excluding 9999)
          LATEST_EBUILD=$(ls niri-*.ebuild | grep -v 9999 | sort -V | tail -1)
          NEW_VERSION=${{ steps.check.outputs.version }}
          NEW_EBUILD="niri-${NEW_VERSION}.ebuild"

          echo "Copying $LATEST_EBUILD to $NEW_EBUILD"
          cp "$LATEST_EBUILD" "$NEW_EBUILD"

          # Download source tarball and calculate checksums
          echo "Downloading source tarball..."
          wget -q -O /tmp/niri-${NEW_VERSION}.tar.gz "https://github.com/YaLTeR/niri/archive/refs/tags/v${NEW_VERSION}.tar.gz"

          # Calculate checksums and file size
          TARBALL_SIZE=$(stat -c%s /tmp/niri-${NEW_VERSION}.tar.gz)
          TARBALL_BLAKE2B=$(b2sum /tmp/niri-${NEW_VERSION}.tar.gz | awk '{print $1}')
          TARBALL_SHA512=$(sha512sum /tmp/niri-${NEW_VERSION}.tar.gz | awk '{print $1}')

          echo "Source tarball: ${TARBALL_SIZE} bytes"
          echo "BLAKE2B: ${TARBALL_BLAKE2B}"
          echo "SHA512: ${TARBALL_SHA512}"

          # Update manifest with source tarball checksums
          # Note: Rust crate dependencies will still need ebuild manifest command
          echo "DIST niri-${NEW_VERSION}.tar.gz ${TARBALL_SIZE} BLAKE2B ${TARBALL_BLAKE2B} SHA512 ${TARBALL_SHA512}" >> Manifest

          # Clean up
          rm -f /tmp/niri-${NEW_VERSION}.tar.gz

          echo "Generated new ebuild for version ${NEW_VERSION}"
          echo "WARNING: Rust crate dependencies in Manifest still need: ebuild niri-${NEW_VERSION}.ebuild manifest"

      - name: Create Pull Request
        if: steps.check.outputs.update-needed == 'true'
        uses: peter-evans/create-pull-request@v7.0.5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "gui-wm/niri: bump to ${{ steps.check.outputs.version }}"
          title: "gui-wm/niri: bump to ${{ steps.check.outputs.version }}"
          body: |
            Automated update of niri package

            New version: ${{ steps.check.outputs.version }}

            Changes:
            - New ebuild: niri-${{ steps.check.outputs.version }}.ebuild
            - Updated Manifest with verified checksums for source tarball
            - Rust crate dependencies still need portage to generate

            Release notes: https://github.com/YaLTeR/niri/releases/tag/v${{ steps.check.outputs.version }}

            **Manual steps required:**
            ```bash
            cd gui-wm/niri

            # Generate Manifest entries for all Rust crate dependencies
            sudo ebuild niri-${{ steps.check.outputs.version }}.ebuild manifest

            # Commit the updated Manifest
            git add Manifest
            git commit --amend --no-edit
            git push --force
            ```

            The source tarball checksum is verified, but Rust crate dependencies must be generated on a Gentoo system with portage.
          branch: auto-update/niri-${{ steps.check.outputs.version }}
          delete-branch: true
          labels: |
            automated
            bump
            needs-manifest

      - name: Summary
        run: |
          if [ "${{ steps.check.outputs.update-needed }}" == "true" ]; then
            echo "Created PR for niri ${{ steps.check.outputs.version }}"
            echo "WARNING: Manual Manifest generation required on Gentoo system"
            echo "Check: https://github.com/${{ github.repository }}/pulls"
          else
            echo "No update needed - already at latest version"
          fi
