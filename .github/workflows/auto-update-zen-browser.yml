name: Auto-update zen-browser-bin

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch: # Manual trigger

permissions:
  contents: write
  pull-requests: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for new release
        id: check
        run: |
          # Get latest release from GitHub API
          LATEST=$(curl -s https://api.github.com/repos/zen-browser/desktop/releases/latest | jq -r .tag_name)

          # Get current latest version from existing ebuilds (handles -r1 revisions)
          if ls www-client/zen-browser-bin/zen-browser-bin-*.ebuild 1> /dev/null 2>&1; then
            CURRENT=$(ls www-client/zen-browser-bin/zen-browser-bin-*.ebuild | \
              sed -n 's/.*zen-browser-bin-\([0-9][^-]*\)\(-r[0-9]*\)\?\.ebuild/\1/p' | \
              sort -V | tail -1)
          else
            CURRENT=""
          fi

          echo "Latest release: $LATEST"
          echo "Current version: $CURRENT"

          if [ "$LATEST" != "$CURRENT" ]; then
            echo "update-needed=true" >> $GITHUB_OUTPUT
            echo "version=$LATEST" >> $GITHUB_OUTPUT
            echo "Update needed: $CURRENT -> $LATEST"
          else
            echo "update-needed=false" >> $GITHUB_OUTPUT
            echo "No update needed"
          fi

      - name: Install b2sum
        if: steps.check.outputs.update-needed == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y coreutils

      - name: Generate new ebuild and update manifest
        if: steps.check.outputs.update-needed == 'true'
        run: |
          cd www-client/zen-browser-bin/

          # Find the latest existing ebuild
          LATEST_EBUILD=$(ls zen-browser-bin-*.ebuild | sort -V | tail -1)
          NEW_VERSION=${{ steps.check.outputs.version }}
          NEW_EBUILD="zen-browser-bin-${NEW_VERSION}.ebuild"

          echo "Copying $LATEST_EBUILD to $NEW_EBUILD"
          cp "$LATEST_EBUILD" "$NEW_EBUILD"

          # Download files and calculate checksums
          AMD64_URL="https://github.com/zen-browser/desktop/releases/download/${NEW_VERSION}/zen.linux-x86_64.tar.xz"
          ARM64_URL="https://github.com/zen-browser/desktop/releases/download/${NEW_VERSION}/zen.linux-aarch64.tar.xz"

          echo "Downloading AMD64 archive..."
          wget -q -O /tmp/zen-${NEW_VERSION}-x86_64.tar.xz "${AMD64_URL}"

          echo "Downloading ARM64 archive..."
          wget -q -O /tmp/zen-${NEW_VERSION}-aarch64.tar.xz "${ARM64_URL}"

          # Calculate checksums and file sizes
          AMD64_SIZE=$(stat -c%s /tmp/zen-${NEW_VERSION}-x86_64.tar.xz)
          AMD64_BLAKE2B=$(b2sum /tmp/zen-${NEW_VERSION}-x86_64.tar.xz | awk '{print $1}')
          AMD64_SHA512=$(sha512sum /tmp/zen-${NEW_VERSION}-x86_64.tar.xz | awk '{print $1}')

          ARM64_SIZE=$(stat -c%s /tmp/zen-${NEW_VERSION}-aarch64.tar.xz)
          ARM64_BLAKE2B=$(b2sum /tmp/zen-${NEW_VERSION}-aarch64.tar.xz | awk '{print $1}')
          ARM64_SHA512=$(sha512sum /tmp/zen-${NEW_VERSION}-aarch64.tar.xz | awk '{print $1}')

          echo "AMD64: ${AMD64_SIZE} bytes"
          echo "AMD64 BLAKE2B: ${AMD64_BLAKE2B}"
          echo "AMD64 SHA512: ${AMD64_SHA512}"
          echo ""
          echo "ARM64: ${ARM64_SIZE} bytes"
          echo "ARM64 BLAKE2B: ${ARM64_BLAKE2B}"
          echo "ARM64 SHA512: ${ARM64_SHA512}"

          # Update manifest with new entries (proper checksums)
          echo "DIST zen-browser-bin-${NEW_VERSION}-x86_64.tar.xz ${AMD64_SIZE} BLAKE2B ${AMD64_BLAKE2B} SHA512 ${AMD64_SHA512}" >> Manifest
          echo "DIST zen-browser-bin-${NEW_VERSION}-aarch64.tar.xz ${ARM64_SIZE} BLAKE2B ${ARM64_BLAKE2B} SHA512 ${ARM64_SHA512}" >> Manifest

          # Clean up downloaded files
          rm -f /tmp/zen-${NEW_VERSION}-x86_64.tar.xz /tmp/zen-${NEW_VERSION}-aarch64.tar.xz

          echo "Generated new ebuild for version ${NEW_VERSION}"
          echo "Updated Manifest with verified checksums"

      - name: Create Pull Request
        if: steps.check.outputs.update-needed == 'true'
        uses: peter-evans/create-pull-request@v7.0.5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "www-client/zen-browser-bin: bump to ${{ steps.check.outputs.version }}"
          title: "www-client/zen-browser-bin: bump to ${{ steps.check.outputs.version }}"
          body: |
            Automated update of zen-browser-bin package

            New version: ${{ steps.check.outputs.version }}

            Changes:
            - New ebuild: zen-browser-bin-${{ steps.check.outputs.version }}.ebuild
            - Updated Manifest with verified BLAKE2B and SHA512 checksums

            Release notes: https://github.com/zen-browser/desktop/releases/tag/${{ steps.check.outputs.version }}

            This PR is ready to merge - all checksums have been verified automatically.
          branch: auto-update/zen-browser-${{ steps.check.outputs.version }}
          delete-branch: true
          labels: |
            automated
            bump

      - name: Summary
        run: |
          if [ "${{ steps.check.outputs.update-needed }}" == "true" ]; then
            echo "Created PR for Zen Browser ${{ steps.check.outputs.version }}"
            echo "Check: https://github.com/${{ github.repository }}/pulls"
          else
            echo "No update needed - already at latest version"
          fi
